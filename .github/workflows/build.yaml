name: mailstack

on:
  push:
    branches: ['otter']
  pull_request:
    branches: ['otter']
  release:
    types: [ created, edited ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GOMODCACHE: ${{ github.workspace }}/go/pkg/mod
  GOBIN: ${{ github.workspace }}/go/bin
  CGO_ENABLED: 0
  LANG: C.UTF-8
  LC_ALL: C.UTF-8

permissions:
  contents: read
  pull-requests: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./deployments/Containerfile
          push: false
          cache-from: |
            type=gha,scope=mailstack-build
          cache-to: |
            type=gha,mode=max,scope=mailstack-build
          build-args: |
            "GO_VERSION=1.23.7"

  # Generate common metadata for all builds
  prepare:
    needs: [ build ]
    runs-on: ubicloud-standard-2
    if: github.ref == 'refs/heads/otter' || github.event_name == 'release'
    outputs:
      safe-tag: ${{ steps.safe-tag.outputs.value }}
    steps:
      # Create a safe tag string from the branch name (replace / with -)
      - name: Set safe tag
        id: safe-tag
        run: |
          # For PR events, use pr-NUMBER format instead of the branch name
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "value=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            # For normal branches, replace / with - to make it safe for tags
            SAFE_TAG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            echo "value=$SAFE_TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash
        working-directory: .

  build-amd64:
    needs: [ prepare ]
    runs-on: ubicloud-standard-2
    if: github.ref == 'refs/heads/otter' || github.event_name == 'release'
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push amd64 image
      - name: Build and push amd64 image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/Containerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Get image digest
      - name: Get image digest
        id: digest
        run: |
          digest=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 --format "{{json .Manifest}}" | jq -r '.digest')
          echo "value=$digest" >> $GITHUB_OUTPUT
        shell: bash

  build-arm64:
    needs: [ prepare ]
    runs-on: ubicloud-standard-2-arm
    if: github.ref == 'refs/heads/otter' || github.event_name == 'release'
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push arm64 image
      - name: Build and push arm64 image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/Containerfile
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Get image digest
      - name: Get image digest
        id: digest
        run: |
          digest=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64 --format "{{json .Manifest}}" | jq -r '.digest')
          echo "value=$digest" >> $GITHUB_OUTPUT
        shell: bash

  # Create multi-arch manifests
  create-manifest:
    needs: [ prepare, build-amd64, build-arm64 ]
    if: github.ref == 'refs/heads/otter' || github.event_name == 'release'
    runs-on: ubicloud-standard-2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to the Container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create and push manifests
      - name: Create and push manifests
        run: |
          # Create and push the SHA manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          
          # Create and push the branch/PR manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          
          # If this is the otter branch, also tag as latest
          if [[ "${{ github.ref_name }}" == "otter" ]]; then
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          fi
          
          # For releases, also tag with the release tag
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, the tag should be the release tag
            RELEASE_TAG=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$RELEASE_TAG \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          fi
        shell: bash

      # Inspect the created manifest
      - name: Inspect manifest
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}
        shell: bash
