name: Create Release

on:
  workflow_run:
    workflows: ["mailstack"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  MAILSTACK_IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

permissions:
  contents: write
  packages: write
  actions: write # Needed to cancel workflow

jobs:
  check-release-needed:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'otter'
    outputs:
      version_bump: ${{ steps.commit_message.outputs.version_bump }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to fetch all tags

      - name: Get version info from commits
        id: commit_message
        run: |
          # Get the merge commit message
          merge_msg=$(git log -1 --pretty=format:"%s")
          echo "Merge message: $merge_msg"
          
          # If this is a merge commit, get the PR commits
          if [[ "$merge_msg" == "Merge pull request"* ]]; then
            # Get just the commits from this PR (between HEAD and where PR branched)
            pr_commits=$(git log HEAD^2 --not HEAD^ --pretty=format:"%s")
            echo "PR commits:"
            echo "$pr_commits"
          
            # Check for version prefixes in PR commits
            if echo "$pr_commits" | grep -q "^major:"; then
              echo "Found major version commit"
              echo "version_bump=major" >> $GITHUB_OUTPUT
            elif echo "$pr_commits" | grep -q "^minor:"; then
              echo "Found minor version commit"
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            elif echo "$pr_commits" | grep -q "^patch:"; then
              echo "Found patch version commit"
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            else
              echo "No version prefix found, skipping release"
              echo "version_bump=skip" >> $GITHUB_OUTPUT
            fi
          else
            # Direct commit to branch - same logic
            if [[ "$merge_msg" =~ ^major: ]]; then
              echo "Found major version commit"
              echo "version_bump=major" >> $GITHUB_OUTPUT
            elif [[ "$merge_msg" =~ ^minor: ]]; then
              echo "Found minor version commit"
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            elif [[ "$merge_msg" =~ ^patch: ]]; then
              echo "Found patch version commit"
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            else
              echo "No version prefix found, skipping release"
              echo "version_bump=skip" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Cancel workflow if no release is needed
        if: steps.commit_message.outputs.version_bump == 'skip'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("No version bump prefix found. Cancelling workflow.");
            await github.rest.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

  create-release:
    needs: check-release-needed
    # Only run if version_bump is not 'skip' - this acts as a failsafe
    if: needs.check-release-needed.outputs.version_bump != 'skip'
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.generate_version.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to fetch all tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          latest_tag=$(git tag -l "v*" | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+$' | sort -t. -k1,1 -k2,2n -k3,3n | tail -n 1 || echo "v0.0.0")          
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Generate next version
        id: generate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          version_bump="${{ needs.check-release-needed.outputs.version_bump }}"
          
          # Debug output
          echo "Latest tag: $latest_tag"
          echo "Version bump type: $version_bump"
          
          # Extract version numbers
          major=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          minor=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          patch=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')
          
          echo "Current version: major=$major minor=$minor patch=$patch"
          
          # Increment version based on bump type
          case "$version_bump" in
            "major")
              echo "Performing major version bump"
              new_major=$((major + 1))
              next_version="v${new_major}.0.0"
              ;;
            "minor")
              echo "Performing minor version bump"
              new_minor=$((minor + 1))
              next_version="v${major}.${new_minor}.0"
              ;;
            "patch")
              echo "Performing patch version bump"
              new_patch=$((patch + 1))
              next_version="v${major}.${minor}.${new_patch}"
              ;;
          esac
          
          echo "Next version will be: $next_version"
          echo "next_version=${next_version}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate_version.outputs.next_version }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker for the release image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push image with the new version tag
      - name: Build and push release image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          file: ./deployments/Containerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.MAILSTACK_IMAGE_NAME }}:${{ steps.generate_version.outputs.next_version }}
          cache-from: |
            type=gha,scope=mailstack-build
          cache-to: |
            type=gha,mode=max,scope=mailstack-build
          build-args: |
            "GO_VERSION=1.23.7"

      # Save outputs for potential deployment workflows
      - name: Save workflow outputs
        run: |
          echo "{\"next_version\": \"${{ steps.generate_version.outputs.next_version }}\"}" > workflow-data.json

      - name: Upload workflow outputs
        uses: actions/upload-artifact@v4
        with:
          name: workflow-data
          path: workflow-data.json