name: Create Release

on:
  workflow_run:
    workflows: ["mailstack"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GOMODCACHE: ${{ github.workspace }}/go/pkg/mod
  GOBIN: ${{ github.workspace }}/go/bin
  CGO_ENABLED: 0
  LANG: C.UTF-8
  LC_ALL: C.UTF-8

permissions:
  contents: write
  packages: write
  actions: write # Needed to cancel workflow

jobs:
  check-release-needed:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'otter'
    outputs:
      version_bump: ${{ steps.commit_message.outputs.version_bump }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch all tags

      - name: Get version info from commits
        id: commit_message
        run: |
          # Get the merge commit message
          merge_msg=$(git log -1 --pretty=format:"%s")
          echo "Merge message: $merge_msg"

          # If this is a merge commit, get the PR commits
          if [[ "$merge_msg" == "Merge pull request"* ]]; then
            # Get just the commits from this PR (between HEAD and where PR branched)
            pr_commits=$(git log HEAD^2 --not HEAD^ --pretty=format:"%s")
            echo "PR commits:"
            echo "$pr_commits"

            # Check for version prefixes in PR commits
            if echo "$pr_commits" | grep -q "^major:"; then
              echo "Found major version commit"
              echo "version_bump=major" >> $GITHUB_OUTPUT
            elif echo "$pr_commits" | grep -q "^minor:"; then
              echo "Found minor version commit"
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            elif echo "$pr_commits" | grep -q "^patch:"; then
              echo "Found patch version commit"
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            else
              echo "No version prefix found, skipping release"
              echo "version_bump=skip" >> $GITHUB_OUTPUT
            fi
          else
            # Direct commit to branch - same logic
            if [[ "$merge_msg" =~ ^major: ]]; then
              echo "Found major version commit"
              echo "version_bump=major" >> $GITHUB_OUTPUT
            elif [[ "$merge_msg" =~ ^minor: ]]; then
              echo "Found minor version commit"
              echo "version_bump=minor" >> $GITHUB_OUTPUT
            elif [[ "$merge_msg" =~ ^patch: ]]; then
              echo "Found patch version commit"
              echo "version_bump=patch" >> $GITHUB_OUTPUT
            else
              echo "No version prefix found, skipping release"
              echo "version_bump=skip" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Cancel workflow if no release is needed
        if: steps.commit_message.outputs.version_bump == 'skip'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("No version bump prefix found. Cancelling workflow.");
            await github.rest.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

  generate-version:
    needs: check-release-needed
    # Only run if version_bump is not 'skip' - this acts as a failsafe
    if: needs.check-release-needed.outputs.version_bump != 'skip'
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.generate_version.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch all tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag, default to v0.0.0 if no tags exist
          latest_tag=$(git tag -l "v*" | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+$' | sort -t. -k1,1 -k2,2n -k3,3n | tail -n 1 || echo "v0.0.0")          
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Generate next version
        id: generate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          version_bump="${{ needs.check-release-needed.outputs.version_bump }}"

          # Debug output
          echo "Latest tag: $latest_tag"
          echo "Version bump type: $version_bump"

          # Extract version numbers
          major=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          minor=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          patch=$(echo $latest_tag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

          echo "Current version: major=$major minor=$minor patch=$patch"

          # Increment version based on bump type
          case "$version_bump" in
            "major")
              echo "Performing major version bump"
              new_major=$((major + 1))
              next_version="v${new_major}.0.0"
              ;;
            "minor")
              echo "Performing minor version bump"
              new_minor=$((minor + 1))
              next_version="v${major}.${new_minor}.0"
              ;;
            "patch")
              echo "Performing patch version bump"
              new_patch=$((patch + 1))
              next_version="v${major}.${minor}.${new_patch}"
              ;;
          esac

          echo "Next version will be: $next_version"
          echo "next_version=${next_version}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.generate_version.outputs.next_version }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build amd64 image for release
  build-release-amd64:
    needs: [generate-version]
    runs-on: ubicloud-standard-2
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push amd64 image
      - name: Build and push amd64 image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/Containerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-amd64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Get image digest
      - name: Get image digest
        id: digest
        run: |
          digest=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-amd64 --format "{{json .Manifest}}" | jq -r '.digest')
          echo "value=$digest" >> $GITHUB_OUTPUT
        shell: bash

  # Build arm64 image for release
  build-release-arm64:
    needs: [generate-version]
    runs-on: ubicloud-standard-2-arm
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push arm64 image
      - name: Build and push arm64 image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./deployments/Containerfile
          platforms: linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-arm64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Get image digest
      - name: Get image digest
        id: digest
        run: |
          digest=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-arm64 --format "{{json .Manifest}}" | jq -r '.digest')
          echo "value=$digest" >> $GITHUB_OUTPUT
        shell: bash

  # Create multi-arch manifests for release
  create-release-manifest:
    needs: [generate-version, build-release-amd64, build-release-arm64]
    runs-on: ubicloud-standard-2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to the Container registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create and push manifest
      - name: Create and push manifest
        run: |
          # Create and push the versioned manifest
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}-arm64

      # Inspect the created manifest
      - name: Inspect manifest
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.next_version }}
        shell: bash

      # Save outputs for potential deployment workflows
      - name: Save workflow outputs
        run: |
          echo "{\"next_version\": \"${{ needs.generate-version.outputs.next_version }}\"}" > workflow-data.json

      - name: Upload workflow outputs
        uses: actions/upload-artifact@v4
        with:
          name: workflow-data
          path: workflow-data.json