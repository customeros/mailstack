// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_model

import (
	"time"

	"github.com/customeros/mailstack/internal/enum"
)

type Attachment struct {
	ID          string `json:"id"`
	Filename    string `json:"filename"`
	ContentType string `json:"contentType"`
	URL         string `json:"url"`
}

type EmailBody struct {
	Text *string `json:"text,omitempty"`
	HTML *string `json:"html,omitempty"`
}

type EmailInput struct {
	MailboxID     *string    `json:"mailboxId,omitempty"`
	FromAddress   string     `json:"fromAddress"`
	FromName      *string    `json:"fromName,omitempty"`
	ToAddresses   []string   `json:"toAddresses"`
	CcAddresses   []string   `json:"ccAddresses,omitempty"`
	BccAddresses  []string   `json:"bccAddresses,omitempty"`
	ReplyTo       *string    `json:"replyTo,omitempty"`
	Subject       string     `json:"subject"`
	Body          *EmailBody `json:"body"`
	AttachmentIds []string   `json:"attachmentIds,omitempty"`
	ScheduleFor   *time.Time `json:"scheduleFor,omitempty"`
	TrackClicks   *bool      `json:"trackClicks,omitempty"`
}

type EmailMessage struct {
	ID              string              `json:"id"`
	ThreadID        string              `json:"threadId"`
	MailboxID       string              `json:"mailboxId"`
	Direction       enum.EmailDirection `json:"direction"`
	From            string              `json:"from"`
	FromName        string              `json:"fromName"`
	To              []string            `json:"to"`
	Cc              []string            `json:"cc,omitempty"`
	Bcc             []string            `json:"bcc,omitempty"`
	Subject         string              `json:"subject"`
	Body            string              `json:"body"`
	AttachmentCount int                 `json:"attachmentCount"`
	ReceivedAt      time.Time           `json:"receivedAt"`
}

type EmailResult struct {
	EmailID string           `json:"emailId"`
	Status  enum.EmailStatus `json:"status"`
	Error   *string          `json:"error,omitempty"`
}

type EmailThread struct {
	ID               string     `json:"id"`
	UserID           string     `json:"userId"`
	MailboxID        string     `json:"mailboxId"`
	Subject          string     `json:"subject"`
	Summary          string     `json:"summary"`
	IsViewed         bool       `json:"isViewed"`
	IsDone           bool       `json:"isDone"`
	LastSender       string     `json:"lastSender"`
	LastSenderDomain string     `json:"lastSenderDomain"`
	LastMessageAt    *time.Time `json:"lastMessageAt,omitempty"`
}

type ImapConfig struct {
	ImapServer   *string             `json:"imapServer,omitempty"`
	ImapPort     *int                `json:"imapPort,omitempty"`
	ImapUsername *string             `json:"imapUsername,omitempty"`
	ImapPassword *string             `json:"imapPassword,omitempty"`
	ImapSecurity *enum.EmailSecurity `json:"imapSecurity,omitempty"`
}

type ImapConfigInput struct {
	ImapServer   *string             `json:"imapServer,omitempty"`
	ImapPort     *int                `json:"imapPort,omitempty"`
	ImapUsername *string             `json:"imapUsername,omitempty"`
	ImapPassword *string             `json:"imapPassword,omitempty"`
	ImapSecurity *enum.EmailSecurity `json:"imapSecurity,omitempty"`
}

type Mailbox struct {
	ID                     string                `json:"id"`
	Provider               enum.EmailProvider    `json:"provider"`
	EmailAddress           string                `json:"emailAddress"`
	SenderID               *string               `json:"senderId,omitempty"`
	InboundEnabled         bool                  `json:"inboundEnabled"`
	OutboundEnabled        bool                  `json:"outboundEnabled"`
	ReplyToAddress         *string               `json:"replyToAddress,omitempty"`
	ConnectionStatus       enum.ConnectionStatus `json:"connectionStatus"`
	LastConnectionCheck    time.Time             `json:"lastConnectionCheck"`
	ConnectionErrorMessage *string               `json:"connectionErrorMessage,omitempty"`
}

type MailboxInput struct {
	ID              *string            `json:"id,omitempty"`
	Provider        enum.EmailProvider `json:"provider"`
	EmailAddress    string             `json:"emailAddress"`
	SenderID        *string            `json:"senderId,omitempty"`
	InboundEnabled  *bool              `json:"inboundEnabled,omitempty"`
	OutboundEnabled *bool              `json:"outboundEnabled,omitempty"`
	ImapConfig      *ImapConfigInput   `json:"imapConfig,omitempty"`
	SMTPConfig      *SMTPConfigInput   `json:"smtpConfig,omitempty"`
	ReplyToAddress  *string            `json:"replyToAddress,omitempty"`
	SyncFolders     []*string          `json:"syncFolders,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type SMTPConfig struct {
	SMTPServer   *string             `json:"smtpServer,omitempty"`
	SMTPPort     *int                `json:"smtpPort,omitempty"`
	SMTPUsername *string             `json:"smtpUsername,omitempty"`
	SMTPPassword *string             `json:"smtpPassword,omitempty"`
	SMTPSecurity *enum.EmailSecurity `json:"smtpSecurity,omitempty"`
}

type SMTPConfigInput struct {
	SMTPServer   *string             `json:"smtpServer,omitempty"`
	SMTPPort     *int                `json:"smtpPort,omitempty"`
	SMTPUsername *string             `json:"smtpUsername,omitempty"`
	SMTPPassword *string             `json:"smtpPassword,omitempty"`
	SMTPSecurity *enum.EmailSecurity `json:"smtpSecurity,omitempty"`
}

type ThreadMetadata struct {
	ID             string        `json:"id"`
	Summary        string        `json:"summary"`
	Participants   []string      `json:"participants"`
	HasAttachments bool          `json:"hasAttachments"`
	Attachments    []*Attachment `json:"attachments,omitempty"`
}
