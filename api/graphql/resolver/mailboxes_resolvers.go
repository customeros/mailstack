package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	opentracing "github.com/opentracing/opentracing-go"
	"github.com/pkg/errors"

	api_errors "github.com/customeros/mailstack/api/errors"
	"github.com/customeros/mailstack/api/graphql/graphql_model"
	"github.com/customeros/mailstack/api/graphql/mappers"
	"github.com/customeros/mailstack/internal/tracing"
	"github.com/customeros/mailstack/internal/utils"
)

// AddMailbox is the resolver for the addMailbox field.
func (r *mutationResolver) AddMailbox(ctx context.Context, input graphql_model.MailboxInput) (*graphql_model.Mailbox, error) {
	span, ctx := opentracing.StartSpanFromContext(ctx, "mutationResolver.AddMailbox")
	defer span.Finish()
	tracing.SetDefaultGraphqlSpanTags(ctx, span)

	tenant := utils.GetTenantFromContext(ctx)
	if tenant == "" {
		tracing.TraceErr(span, errors.New("tenant not set"))
		return nil, api_errors.NewError("tenant not set", api_errors.CodeBadInput, nil)
	}
	userId := utils.GetUserIdFromContext(ctx)
	if userId == "" {
		tracing.TraceErr(span, errors.New("userId not set"))
		return nil, api_errors.NewError("usedId not set", api_errors.CodeBadInput, nil)
	}

	mailbox, err := r.services.MailboxService.EnrollMailbox(ctx, mappers.MapGraphMailboxInputToGorm(&input))
	if err != nil || mailbox == nil {
		tracing.TraceErr(span, err)
		return nil, api_errors.NewError("unable to add mailbox", api_errors.CodeInternal, nil)
	}

	return mappers.MapGormMailboxToGraph(mailbox), nil
}

// UpdateMailbox is the resolver for the updateMailbox field.
func (r *mutationResolver) UpdateMailbox(ctx context.Context, id string, input graphql_model.MailboxInput) (*graphql_model.Mailbox, error) {
	panic(fmt.Errorf("not implemented: UpdateMailbox - updateMailbox"))
}
